using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Text.RegularExpressions;

/*
 * Kärppä-ohjelma on Richard Dawkinsin kehittämä ajatuskoe, jonka tarkoituksena on osoittaa, että
 * tarpeeksi monella iteraatiolla voidaan saavuttaa jotain tiettyä. Ohjelma toimii esimerkkinä evoluutiosta.
 * Esimerkkinä on Shakespearen näytelmästä lause "METHINKS IT IS LIKE A WEASEL". Ohjelmassa luodaan sattumanvaraisesti
 * tietynpituinen merkkijono, jota sitten muutetaan lisää sattumanvaraisesti. Muutetuille
 * merkkijonoille annetaan pisteet, ja parhaiten pisteytetyt merkkijonot "otetaan jatkoon" jolloin niitä muutetaan lisää.
 * Tätä jatketaan, kunnes päästään haluttuun merkkijonoon.
 * 
 * Tässä ohjelmassa käytetään Wikipediasta löytyvää algoritmia ohjenuorana.
 * https://en.wikipedia.org/wiki/Weasel_program
 * 
 *  1. Start with a random string of 28 characters.
    2. Make 100 copies of the string (reproduce).
    3. For each character in each of the 100 copies, with a probability of 5%, replace (mutate) the character with a new random character.
    4. Compare each new string with the target string "METHINKS IT IS LIKE A WEASEL", and give each a score (the number of letters in the string that are correct and in the correct position).
    5. If any of the new strings has a perfect score (28), halt. Otherwise, take the highest scoring string, and go to step 2.
 * 
 */

//puuttuu numerointi ja arvotus
namespace Kärppä
{
    class Program
    {

        // Kirjoitetaan haluttu merkkijono
        // Kutsutaan muita sillä
        // Käyteään vain kerran
        static void Main(string[] args)
        {
            string original = "METHINKS IT IS LIKE A WEASEL";

            Vertaa(Muuta(Kopioi(Uusijono())), original);            
        }

      // Luodaan uusi merkkijono halutuista merkeistä
        public static string Uusijono()
        {
            Random random_number = new Random();

            // Määrätään, mitkä kirjaimet ovat sallittuja merkkijonossa
            // Pitää sisältää myös tyhjä
            string setOfCharacters = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";

            // Luodaan merkkijono
            string randomString = "";
            for (int i = 0; i < 28; i++)
            {
                int index = random_number.Next(0, setOfCharacters.Length - 1);
                randomString += setOfCharacters[index];
            }

            return randomString;
        }


        //tehdään taulukko ja täytetään se annetulla jonolla
        public static string[] Kopioi(string mutantti)
        {
            string[] mutanttitaulukko = new string[100]; //100

            for (int i = 0; i < 100; i++)
            {
                mutanttitaulukko[i] = mutantti;
            }

            return mutanttitaulukko;
        }

        // Muutetaan taulukon sisältöä 5%n todennäköisyydellä
        // Jos sattumanvarainen luku on 1 (eli 1 20:stä), vaihdetaan kirjain
        // Muuten kirjain pidetään samana
        // Ensimmäinen for-loop on itse taulukon sisällölle
        // Toinen for-loop on string-jonon kirjaimille
        public static string[] Muuta(string[] taulukko)
        {
            Random RandomGen = new Random();

            Random random_number = new Random();
            string setOfCharacters = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";

            string[] uusitaulukko = new string[100];

            for (int i = 0; i < taulukko.Length; i++)
            {
                string uusijono = taulukko[i];
                StringBuilder sb = new StringBuilder(uusijono);

                for (int j = 0; j < 28; j++)
                {
                    //char uusikirjain = uusijono[j];
                    int index = random_number.Next(0, setOfCharacters.Length - 1);
                    char uusikirjain = setOfCharacters[index];

                    int randomArvo20 = RandomGen.Next(1, 20);
                    if (randomArvo20 < 2)
                    {
                        sb[j] = uusikirjain;
                        sb.ToString();
                    }

                    taulukko[i] = sb.ToString();
                }
            }
            return taulukko;

        }

        /*
         * Verrataan luotuja mutatoituja merkkijonoja alkuperäiseen
         * Otetaan parhaat pisteet saanut
         * Jos täydet 28 pistettä, printataan merkkijono ja lopetetaan
         */
        public static string Vertaa (string [] taulukko, string original)
        {
            int korkein = 0;
            string paras = "";

            for (int i = 0;i < taulukko.Length; i++)
            {
                int valiaikainen = CompareStrings (original, taulukko[i]);

                if (valiaikainen == 28)
                {
                    paras = taulukko[i];
                    Console.WriteLine(paras);
                    return paras;             
                }

                if (valiaikainen > korkein) // && korkein < 28
                {
                    korkein = valiaikainen;
                    paras = taulukko[i];
                    Console.WriteLine(paras);                  
                }  
            }
          
            return Vertaa(Muuta(Kopioi(paras)), original);
        }

        // Verrataan string-jonoja ja annetaan arvosana
        public static int CompareStrings (string mutantti, string original)
        {
            int score = 0;

            for (int i = 0; i < original.Length; i++)
            {
                if (mutantti[i] == original[i])
                {
                    score += 1;
                }
            }
            return score;
        }
    }
}
